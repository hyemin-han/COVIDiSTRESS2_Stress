psych::alpha(data[,88:95])
testmodel <- 'SI ~= socialinfluence_nor1_1 + socialinfluence_nor1_2'
testcfa(testmodel,data)
testcfa<-cfa(testmodel,data)
library(lavaan)
testcfa<-cfa(testmodel,data)
testmodel <- 'SI =~ socialinfluence_nor1_1 + socialinfluence_nor1_2'
testcfa<-cfa(testmodel,data)
testmodel <- 'SI =~ socialinfluence_nor1_1 + socialinfluence_nor1_2+socialinfluence_nor1_3+socialinfluence_nor1_4+socialinfluence_nor1_5+socialinfluence_nor1_6+socialinfluence_nor1_7+socialinfluence_nor1_8'
testcfa<-cfa(testmodel,data)
library(semTools)
runMI
test<-cfa.mi(testmodel,data = )
test<-cfa.mi(testmodel,data)
install.packages('Amelia')
test<-cfa.mi(testmodel,data)
test<-cfa.mi(testmodel,data,m=20)
head(data[,88:104])
testset<-data[,88:104]
head(testset)
testset<-data[,88:95]
head(testset)
test<-cfa.mi(testmodel,testset,m=20)
test
head(test@Data)
test@Data
test@Data@group
test<-cfa.mi(testmodel,testset,m=20,groups='UserLanguage')
test<-cfa.mi(testmodel,testset,m=20,group='UserLanguage')
test<-cfa.mi(testmodel,testset,m=20,miArgs = list(cs = "UserLanguage"))
testset<-data.filtered[,88:95]
head(testset)
test<-cfa.mi(testmodel,testset,m=20,miArgs = list(cs = "UserLanguage"))
testset<-data.filtered[,c(88:95,'UserLanguage')]
testset<-cbind(data.filtered[,c(88:95)],data.filtered$UserLanguage)
head(testset)
testset<-data.filtered[,c(88:95,'UserLanguage')]
test<-cfa.mi(testmodel,testset,m=20,miArgs = list(cs = "UserLanguage"))
class(testset)
test<-cfa.mi(testmodel,testset,m=20,miArgs = list(cs = "UserLanguage"))
test<-cfa.mi(testmodel,testset,m=20,miArgs = list(cs = "data.filtered$UserLanguage"))
test
summary(test)
fitMeasures(test)
test<-cfa.mi(testmodel,testset,estimator='WLSMV'm=20,miArgs = list(cs = "data.filtered$UserLanguage"))
test<-cfa.mi(testmodel,testset,estimator='WLSMV',m=20,miArgs = list(cs = "data.filtered$UserLanguage"))
fitMeasures(test)
test@Data@missing
summary(test@Data)
testamelia <- amelia(testset,m=20,cs='UserLanguage')
testamelia <- amelia(testset,m=20,cs='data.filtered$UserLanguage')
imps<-testamelia$imputations
head(imps)
head(testamelia$imputations$imp1)
head(testamelia$imputations$imp2)
AmeliaView()
a.out <- transform(testamelia)
head(a.out)
install.packages("Zelig")
load("~/Documents/GitHub/Identity-Project/Identity_aligned.RData")
testset<-data.filtered[,c(88:95,'UserLanguage')]
testset<-cbind(data.filtered[,c(88:95)],data.filtered$UserLanguage)
colnames(testset)
colnames(data.filtered)
testset<-cbind(data.filtered[,c(89:96)],data.filtered$UserLanguage)
testamelia <- amelia(testset,m=20,cs='data.filtered$UserLanguage')
for (i in 20){}
for (i in 20){
i<-1
tempdata <- cbind(testamelia$imputations[[i]],data.filtered$CS)
head(tempdata)
colnames(tempdata)[10] <- 'CS'
tempdata <- tempdata[,c(1:8,10)]
head(tempdata)
for (i in 20){
tempdata <- cbind(testamelia$imputations[[i]],data.filtered$CS)
colnames(tempdata)[10] <- 'CS'
tempdata <- tempdata[,c(1:8,10)]
ols.out <- lm(CS ~. , data=tempdata)
}
ols.out
summary(ols.out)
b.out <- NULL
se.out <- NULL
ols.out$coefficients
coef(summary(ols.out))[,2]
for (i in 20){
tempdata <- cbind(testamelia$imputations[[i]],data.filtered$CS)
colnames(tempdata)[10] <- 'CS'
tempdata <- tempdata[,c(1:8,10)]
ols.out <- lm(CS ~. , data=tempdata)
b.out <- rbind(b.out,ols.out$coefficients)
se.out <- rbind(se.out, coef(summary(ols.out))[,2])
}
b.out
se.out
for (i in 1:20){
tempdata <- cbind(testamelia$imputations[[i]],data.filtered$CS)
colnames(tempdata)[10] <- 'CS'
tempdata <- tempdata[,c(1:8,10)]
ols.out <- lm(CS ~. , data=tempdata)
b.out <- rbind(b.out,ols.out$coefficients)
se.out <- rbind(se.out, coef(summary(ols.out))[,2])
}
b.out
se.out
b.out <- NULL
se.out <- NULL
for (i in 1:20){
tempdata <- cbind(testamelia$imputations[[i]],data.filtered$CS)
colnames(tempdata)[10] <- 'CS'
tempdata <- tempdata[,c(1:8,10)]
ols.out <- lm(CS ~. , data=tempdata)
b.out <- rbind(b.out,ols.out$coefficients)
se.out <- rbind(se.out, coef(summary(ols.out))[,2])
}
combined.results <- mi.meld(q=b.out,se=se.out)
combined.results
testmodel
testmodel<-'
S1 =~ socialinfluence_nor1_1+socialinfluence_nor1_2+socialinfluence_nor1_3+
socialinfluence_nor1_4+socialinfluence_nor1_5+socialinfluence_nor1_6+
socialinfluence_nor1_7+socialinfluence_nor1_8
'
configural <- cfa.mi(testmodel,testset,group='data.filtered$UserLanguage',
estimator='WLSMV',m=20,seed=12345,
miArgs = list(noms = "data.filtered$UserLanguage"))
configural
summary(configural)
fitMeasures(configural)
configural <- cfa.mi(testmodel,testset,group='data.filtered$UserLanguage',
estimator='WLSMV',m=20,seed=12345
)
colnames(testset)
configural <- cfa.mi(testmodel,testset,group='data.filtered$UserLanguage',
estimator='WLSMV',m=20,seed=12345,
miArgs = list(x = testset[,1:8])
)
ameliadata <- amelia(testset,m=20,seed=12345,cs='data.filtered$UserLanguage')
configural <- cfa.mi(testmodel,ameliadata$imputations,group='data.filtered$UserLanguage',
estimator='WLSMV',m=20,seed=12345
)
configural <- cfa.mi(testmodel,ameliadata$imputations,group='data.filtered$UserLanguage',
estimator='MLR',m=20,seed=12345
)
fitmeasures(configural)
Fitmeasures(configural)
fitMeasures(configural)
fitMeasures(configural,test = "D2" , pool.robust = TRUE)
metric <- cfa.mi(testmodel,ameliadata$imputations,group='data.filtered$UserLanguage',
estimator='MLR',m=20,seed=12345, group.equal='loadings'
)
fitMeasures(configural,test = "D2" , pool.robust = TRUE)
fitMeasures(metric,test = "D2" , pool.robust = TRUE)
fitMeasures(metric)
scalar <- cfa.mi(testmodel,ameliadata$imputations,group='data.filtered$UserLanguage',
estimator='MLR',m=20,seed=12345, group.equal=c('loadings',
'intercepts')
)
fits.scalar<-fitMeasures(scalar)
fits.scalar
test <- plausibleValues(scalar)
test
test<-lavPredict(scalar)
scalar
summary(scalar)
class?lavaan.mi
test<-fitted(scalar)
test
test$EN
test<-fitted.values(scalar)
test
test <- plausibleValues(scalar)
test
test[[1]]
head(test[[1]])
head(test[[2]])
head(test[[3]])
head(test[[4]])
head(test[[5]])
head(test[[20]])
save.image("~/Documents/Research/Collaborations/COVID/Social_Norms/test.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_H2.RData")
library(lmerTest)
library(brms)
library(EMAtools)
bayestestR::mediation(med_result)
med_result
bayestestR::mediation(med_result)
test<-bayestestR::mediation(med_result)
test$Estimate
test$Effect
.219-.123
load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_H3.RData")
med3_result
bayestestR::mediation(med3_result)
citation(package = "base", lib.loc = NULL, auto = NULL)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1")
library(lavaan)
library(blavaan)
#
load('../Stress_aligned.RData')
model.res <-'
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS
SS ~~ GID
'
fit.res <- sem(model.res,data=data.filtered, estimator='DWLS')
fitmeasures(fit.res)
model.pss <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS
SS ~~ GID
'
fit.pss <- sem(model.pss,data=data.filtered,estimator='DWLS')
fitmeasures(fit.pss)
# both at the same time?
model.both <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS
SS ~~ GID
'
fit.both <- sem(model.both,data=data.filtered,estimator='DWLS')
summary(fit.both)
fitmeasures(fit.both)
fit.both <- sem(model.both,data=data.filtered,estimator='WLSMV')
fitmeasures(fit.both)
fit.both <- sem(model.both,data=data.filtered,estimator='DWLS')
fitmeasures(fit.both)
fit.both <- sem(model.both,data=data.filtered,estimator='MLr')
fitmeasures(fit.both)
fit.both <- sem(model.both,data=data.filtered,estimator='ml')
fitmeasures(fit.both)
fit.both <- sem(model.both,data=data.filtered,estimator='dwls')
fitmeasures(fit.both)
summary(fit.both)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3a_R1.RData")
library(lmerTest)
library(brms)
library(EMAtools)
library(sjstats)
pss.2nb <- bayes_factor(pss.2,pss.2n, log=TRUE) # 274.14801
pss.2nb
pss.1nb <- bayes_factor(pss.1,pss.2n, log=TRUE) # 274.14801
pss.1nb
pss.0nb <- bayes_factor(pss.0,pss.2n, log=TRUE) # 274.14801
pss.0nb
res.0n <- bayes_factor(res.0,res.n, log = T)
res.0n
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
res.21
log(res.21)
log(.05484)
bayes_factor(res.2,res.1, log=T)
pss.1n <- bayes_factor(pss.1, pss.n, log=T)
#### no random
# PSS
pss.n <- brms::brm(pss ~ secondary+ gender + education + work_location + age+
SSS_faml+ relationship_status,
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
pss.1n <- bayes_factor(pss.1, pss.n, log=T) #
pss.1n
## RES
res.n <- brms::brm(resilience ~ secondary+ gender + education + work_location + age+
SSS_faml+ relationship_status,
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
res.1n <- bayes_factor(res.1,res.n, log=T) # Inf # better
res.1n
res.2n <- bayes_factor(res.2,res.n, log=T) # 167.22297
res.2n
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3a_R1.RData")
bf.res.n0
bf.pss.n0
bf.pss.n0 <- bayes_factor(med.pss.n,med.pss.0,log = T) # 14883.20380
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3d_R1.RData")
bf.pss.n0
bf.pss.2n <-  bayes_factor(med.pss.n,med.pss.2,log = T) # 14883.20380
bf.pss.2n
bf.pss.1n <-  bayes_factor(med.pss.n,med.pss.1,log = T) # -659.92765
bf.pss.1n
bf.res.n0
bf.res.2n <- bayes_factor(med.res.n,med.res.2,log = T)
bf.res.2n
bf.res.1n <- bayes_factor(med.res.n,med.res.1,log = T) # -243.92886
bf.res.1n
gc()
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3a_R1.RData")
performance::icc(lmer.pss.2)
# ICC calculation
lmer.pss.2 <- lmer (pss ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered)
performance::icc(lmer.pss.2)
# pss
MuMIn::r.squaredGLMM(lmer.pss.2)
MuMIn::r.squaredGLMM(lmer.res.2)
# hypothesis testing
hypothesis(pss.2,'primary_stressor_avg > 0')
hypothesis(res.2,'primary_stressor_avg < 0')
# sensitivity check
# normal distribution prior
prior.coef1 <- brms::prior(normal(0.,1000000),class='b')
pss.conf <- confint(lmer.pss.2)
# hypothesis testing
hypothesis(pss.2,'primary_stressor_avg > 0')
prior.coef1 <- brms::prior(normal(0.,1000000),class='b')
pss.2.norm <- brms::brm(pss ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
res.2.norm <- brms::brm(resilience ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
# test
hypothesis(pss.2.norm, 'primary_stressor_avg > 0')
hypothesis(res.2.norm,'primary_stressor_avg<0')
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3a_R1.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
# hypothesis testing
hypothesis(pss.2,'secondary>0')
# 1 is better, so random intercept model will be used
hypothesis(res.1, 'secondary < 0')
# each demographics. Main effect test from pss.2
hypothesis(pss.2,'genderMale<0')
hypothesis(pss.2,'SSS_faml<0')
hypothesis(res.1,'genderMale>0')
hypothesis(res.1,'SSS_faml>0')
# both best
hypothesis(secondary.both.1,'SSS_faml<0')
hypothesis(res.1,'SSS_faml>0')
hypothesis(pss.2,'SSS_faml<0')
hypothesis(res.1,'genderMale>0')
hypothesis(res.1,'SSS_faml>0')
prior.coef1 <- brms::prior(normal(0.,1000000),class='b')
pss.2.norm <- brms::brm(pss ~ secondary+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
res.2.norm <- brms::brm(pss ~ secondary+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
hypothesis(pss.2.norm,'secondary>0')
hypothesis(pss.2.norm,'gender<0') # Inf
hypothesis(pss.2.norm,'SSS_faml<0') # Inf
hypothesis(pss.2.norm,'gender < 0') # Inf
hypothesis(pss.2.norm,'genderMale < 0') # Inf
hypothesis(res.2.norm,'secondary<0') # Inf
hypothesis(res.2.norm,'genderMale > 0') # Inf
hypothesis(res.2.norm,'SSS_faml>0') # Inf
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3bs_R1.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3d_R1.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
hypothesis (pss.identity, 'secondary > 0') # Inf
hypothesis (pss.identity, 'identity < 0') # Inf
hypothesis (pss.identity, 'secondary:identity < 0')
hypothesis(res.int.n, 'secondary < 0') # Inf
hypothesis(res.int.1, 'secondary < 0')
hypothesis(res.int.1, 'identity > 0')
hypothesis(res.int.1, 'secondary:identity > 0')
hypothesis (pss.identity, 'identity < 0') # Inf
hypothesis (pss.identity, 'secondary:identity < 0')
hypothesis(res.int.1, 'secondary < 0')
hypothesis(res.int.1, 'identity > 0')
hypothesis(res.int.1, 'secondary:identity > 0')
pss.identity.normal <- brms::brm(pss ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary+identity|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
#normal distribution
### normal distribution
prior.coef1 <- brms::prior(normal(0.,1000000),class='b')
pss.identity.normal <- brms::brm(pss ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary+identity|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
res.int.1.normal<- brms::brm(resilience ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1)
# PSS
hypothesis(pss.identity.normal, 'secondary < 0') # Inf
# PSS
hypothesis(pss.identity.normal, 'secondary > 0') # Inf
hypothesis(pss.identity.normal, 'identity < 0') # Inf
hypothesis(pss.identity.normal, 'secondary:identity > 0') # .68?
hypothesis(pss.identity.normal, 'secondary:identity < 0') # .68?
# RES
hypothesis(res.int.1.normal, 'secondary < 0') # Inf
hypothesis(res.int.1.normal, 'identity > 0') # Inf
hypothesis(res.int.1.normal, 'secondary:identity > 0') # 0.23?
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3_groupid_R1.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3d_R1.RData")
# each path bayes test
hypothesis(med.pss.2, 'sps_identity>0') # Inf
hypothesis(med.pss.2, 'pss_identity<0') # 1999
hypothesis(med.pss.2, 'pss_sps<0') # Inf
# just in case frequentist
library(lmerTest)
pss.test <- lmer(pss ~ identity+ sps+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+identity+sps|residing_country),data=data.filtered)
summary(pss.test)
library(EMAtools)
pss.test1 <- lmer(pss ~ identity+ sps+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),data=data.filtered)
EMAtools::lme.dscore(pss.test1,data.filtered,'lme4')
hypothesis(med.res.2, 'resilience_identity>0') # Inf
hypothesis(med.res.2, 'resilience_sps>0') # Inf
# just in case frequentist
res.freq <- lmer(resilience ~ identity+ sps+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+identity+sps|residing_country),data.filtered)
summary(res.freq)
res.freq1 <- lmer(resilience ~ identity+ sps+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),data.filtered)
lme.dscore(res.freq1,data.filtered,'lme4')
summary(pss.test)
prior.coef1 <- brms::prior(normal(0.,1000000),class='b')
med.res.2.normal = brm(
model.mediator.2 + model.res.2 + set_rescor(F),
data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1
)
med.pss.2.normal = brm(
model.mediator.2 + model.pss.2 + set_rescor(F),
data=data.filtered,
family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef1
)
hypothesis(med.res.2.normal, 'sps_identity>0') # Inf
hypothesis(med.res.2.normal, 'resilience_identity>0') # Inf
hypothesis(med.res.2.normal, 'resilience_sps>0') # Inf
hypothesis(med.pss.2.normal, 'sps_identity<0') # Inf
hypothesis(med.pss.2.normal, 'resilience_identity<0') # Inf
hypothesis(med.pss.2.normal, 'pss_identity<0') # Inf
hypothesis(med.pss.2.normal, 'pss_sps<0') # Inf
hypothesis(med.res.2.normal, 'sps_identity>0') # Inf
hypothesis(med.res.2.normal, 'resilience_identity>0') # Inf
hypothesis(med.res.2.normal, 'resilience_sps>0') # Inf
hypothesis(med.pss.2.normal, 'sps_identity<0') # Inf
hypothesis(med.pss.2.normal, 'pss_identity<0') # Inf
hypothesis(med.pss.2.normal, 'pss_sps<0') # Inf
hypothesis(med.pss.2.normal, 'pss_identity<0') # Inf
hypothesis(med.pss.2.normal, 'pss_sps<0') # Inf
hypothesis(med.pss.2, 'pss_sps<0') # Inf
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3d_R1.RData")
hypothesis(med.pss.2, 'pss_sps<0') # Inf
# each path bayes test
hypothesis(med.pss.2, 'sps_identity>0') # Inf
pss.med.test <- lmer(sps ~ identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+identity|residing_country),data.filtered)
summary(pss.med.test)
pss.med.test1 <- lmer(sps ~ identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),data.filtered)
lme.dscore(pss.med.test1,data.filtered,'lme4')
?mediation
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/SEM.RData")
# variable list
vars <- c('primary_stressor_avg','secondary','sps','identity',
'pss','resilience')
cors<-corr.test(data.filtered[,vars])
### correlation (Reviewer 3)
library(psych)
cors<-corr.test(data.filtered[,vars])
ㅊㅐㄱㄴ
cors
