sss<-summary(cfa.configural.sugar.young)
sss$PE
sss[[2]]
sss
View(sss)
head(data[,c(vars.sugar.young,'sugar_rec')])
test<-cfa(cfa.model.sugar.young,data[data$UserLanguage=='KO',],estimator='WLSMV')
test
summary(test)
table(data$UserLanguage)
table(data.mi$UserLanguage)
data.text <- readLines("../Sugar.Data.csv")
data.text <- gsub("^\"|\"$", "", data.text)
data.text <- gsub("\"\"", "\"", data.text)
data <- read.csv(text=data.text, header=T)
# defined variables
vars.sugar.young <- c('Sugar_rel_receive_1','Sugar_rel_receive_2',
'Sugar_rel_receive_3','Sugar_rel_receive_4',
'Sugar_rel_receive_5')
# MERGE ES and PT
data[data$UserLanguage == 'ES-ES','UserLanguage'] <- 'ES'
data[data$UserLanguage == 'PT-BR','UserLanguage'] <- 'PT'
# sorting
data <- data[order(data$UserLanguage),]
table(data.mi$UserLanguage)
# MERGE ES and PT
data[(data$UserLanguage == 'ES-ES'),'UserLanguage'] <- 'ES'
data[(data$UserLanguage == 'PT-BR'),'UserLanguage'] <- 'PT'
table(data.mi$UserLanguage)
sum(data$UserLanguage == 'ES-ES')
sum(data$UserLanguage == 'EL')
sum(data$UserLanguage == 'PT-BR')
sum(data$UserLanguage == 'PT')
table(data.mi$UserLanguage)
table(data$UserLanguage)
# sorting
data <- data[order(data$UserLanguage),]
# extract languages with n >= 100
n.langs <- table(data$UserLanguage)
list.langs <- labels(n.langs)[[1]]
langs.include <- list.langs[n.langs>=100]
n.include <- n.langs[n.langs>=100]
# extract data
for (i in 1:length(langs.include)){
if (i == 1){
data.mi <- data[data$UserLanguage == langs.include[i],]
}else{
current <- data[data$UserLanguage == langs.include[i],]
data.mi <- rbind(data.mi,current)
}
}
# configural
cfa.configural.sugar.young <- cfa(cfa.model.sugar.young, data.mi,
estimator='WLSMV', group = 'UserLanguage')
fitMeasures(cfa.configural.sugar.young)[fits]
cfa.metric.sugar.young <- cfa(cfa.model.sugar.young, data.mi,
estimator='WLSMV', group = 'UserLanguage',
group.equal='loadings')
fitMeasures(cfa.metric.sugar.young)[fits]
# difference
fitMeasures(cfa.metric.sugar.young)[fits]-fitMeasures(cfa.configural.sugar.young)[fits]
# Scalar
cfa.scalar.sugar.young <- cfa(cfa.model.sugar.young, data.mi,
estimator='WLSMV', group = 'UserLanguage',
group.equal=c('loadings','intercepts'))
fitMeasures(cfa.scalar.sugar.young)[fits]
# difference
fitMeasures(cfa.scalar.sugar.young)[fits]-fitMeasures(cfa.metric.sugar.young)[fits]
##### Alignment
# extract parameters
par.sugar.young <- invariance_alignment_cfa_config(dat = data.mi[,vars.sugar.young],
group = data.mi$UserLanguage,
estimator='WLSMV')
par.sugar.young
test<-cfa(cfa.model.sugar.young,data.mi[data.mi$UserLanguage=='FAR',],estimator='WLSMV')
test
summary(test)
test<-cfa(cfa.model.sugar.young,data.mi[data.mi$UserLanguage=='FAR',],estimator='ML')
summary(test)
fitMeasures(test)
# extract loadings from the model
ipars <- parameterEstimates(cfa.configural.sugar.young)
lambda <- matrix( ipars[ ipars$op=="=~", "est"], nrow=length(langs.include),
byrow=TRUE)
colnames(lambda) <- vars.sugar.young
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=length(langs.include),  byrow=TRUE)
colnames(nu) <- vars.sugar.young
# do alignment
mod1.sugar.young <- invariance.alignment(lambda = lambda, nu =
nu,
align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.SY <- aligned.factor.scores(mod1.sugar.young$lambda.aligned[i,],
mod1.sugar.young$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],vars.sugar.young])
data.aligned$ASR_YWMS <- t(F.SY)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.SY <- aligned.factor.scores(mod1.sugar.young$lambda.aligned[i,],
mod1.sugar.young$nu.aligned[i,],
current[,vars.sugar.young])
current$ASR_YWMS <- t(F.SY)
data.aligned <- rbind(data.aligned,current)
}
}
corr.test(data.aligned[,c('ASR_YWMS','sugar_rec')])
test<-cfa(cfa.model.sugar.young,data.mi[data.mi$UserLanguage=='FAR',],estimator='ML')
summary(test)
psych::alpha(data.mi[data.mi$UserLanguage=='FAR',vars.sugar.young])
psych::alpha(data.mi[data.mi$UserLanguage=='FAR',vars.sugar.young],check.keys = T)
psych::alpha(data.mi[data.mi$UserLanguage=='AR',vars.sugar.young],check.keys = T)
test <- cfa(cfa.configural.sugar.young,
data[data$UserLanguage=='FAR'],
estimator='WLSMV')
summary(test,fit.measures=T)
test <- cfa(cfa.configural.sugar.young,
data[data$UserLanguage=='FAR'],
estimator='WLSMV')
test <- cfa(cfa.configural.sugar.young,
data[data$UserLanguage=='FAR',],
estimator='WLSMV')
test <- cfa(cfa.model.sugar.young,
data[data$UserLanguage=='FAR',],
estimator='WLSMV')
summary(test,fit.measures=T)
cfa.model.sugar.young <- 'ASR_YWMS =~
Sugar_rel_receive_1+Sugar_rel_receive_2+Sugar_rel_receive_3+
Sugar_rel_receive_4+Sugar_rel_receive_5'
test <- cfa(cfa.model.sugar.young,
data[data$UserLanguage=='FAR',],
estimator='WLSMV')
summary(test,fit.measures=T)
colnames(data)
# defined variables
vars.sugar.old <- c('Sugar_rel_give_1','Sugar_rel_give_2',
'Sugar_rel_give_3','Sugar_rel_give_4',
'Sugar_rel_give_5')
# MERGE ES and PT
data[(data$UserLanguage == 'ES-ES'),'UserLanguage'] <- 'ES'
data[(data$UserLanguage == 'PT-BR'),'UserLanguage'] <- 'PT'
# sorting
data <- data[order(data$UserLanguage),]
# extract languages with n >= 100
n.langs <- table(data$UserLanguage)
list.langs <- labels(n.langs)[[1]]
langs.include <- list.langs[n.langs>=100]
n.include <- n.langs[n.langs>=100]
# extract data
for (i in 1:length(langs.include)){
if (i == 1){
data.mi <- data[data$UserLanguage == langs.include[i],]
}else{
current <- data[data$UserLanguage == langs.include[i],]
data.mi <- rbind(data.mi,current)
}
}
# set and examine fitmeasures
fits <- c('rmsea.scaled','srmr','cfi.scaled','tli.scaled')
# start with mi
cfa.model.sugar.old <- 'ASR_OWMS =~
Sugar_rel_give_1+Sugar_rel_give_2+Sugar_rel_give_3+
Sugar_rel_give_4+Sugar_rel_give_5'
# configural
cfa.configural.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'UserLanguage')
fitMeasures(cfa.configural.sugar.young)[fits]
fitMeasures(cfa.configural.sugar.old)[fits]
cfa.metric.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'UserLanguage',
group.equal='loadings')
fitMeasures(cfa.metric.sugar.old)[fits]
# difference
fitMeasures(cfa.metric.sugar.old)[fits]-fitMeasures(cfa.configural.sugar.old)[fits]
# Scalar
cfa.scalar.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'UserLanguage',
group.equal=c('loadings','intercepts'))
fitMeasures(cfa.scalar.sugar.old)[fits]
# difference
fitMeasures(cfa.scalar.sugar.old)[fits]-fitMeasures(cfa.metric.sugar.old)[fits]
cfa.residual.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'UserLanguage',
group.equal=c('loadings','intercepts','residuals'))
fitMeasures(cfa.residual.sugar.old)[fits]
# difference
fitMeasures(cfa.residual.sugar.old)[fits]-fitMeasures(cfa.scalar.sugar.old)[fits]
###
### configural
cfa.sex.configural.sugar.old<- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'Sex')
fitMeasures(cfa.sex.configural.sugar.old)[fits]
###
### metric
cfa.sex.metric.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'Sex',
group.equal='loadings')
fitMeasures(cfa.sex.metric.sugar.old)[fits]
fitMeasures(cfa.sex.metric.sugar.old)[fits]-fitMeasures(cfa.sex.configural.sugar.old)[fits]
###
### scalar
cfa.sex.scalar.sugar.old <- cfa(cfa.model.sugar.old, data.mi,
estimator='WLSMV', group = 'Sex',
group.equal=c('loadings','intercepts'))
fitMeasures(cfa.sex.scalar.sugar.old)[fits]
fitMeasures(cfa.sex.scalar.sugar.old)[fits]-fitMeasures(cfa.sex.metric.sugar.oldg)[fits]
fitMeasures(cfa.sex.scalar.sugar.old)[fits]-fitMeasures(cfa.sex.metric.sugar.old)[fits]
fitMeasures(cfa.sex.metric.sugar.old)[fits]-fitMeasures(cfa.sex.configural.sugar.old)[fits]
fitMeasures(cfa.sex.scalar.sugar.old)[fits]
fitMeasures(cfa.sex.scalar.sugar.old)[fits]-fitMeasures(cfa.sex.metric.sugar.old)[fits]
###
### residual
cfa.sex.residual.sugar.young <- cfa(cfa.model.sugar.young, data.mi,
estimator='WLSMV', group = 'Sex',
group.equal=c('loadings','intercepts','residuals'))
#### cross-subcontinent invariance test
# drop no subcontinent
data.cont <- data.mi[(data.mi$subregion_country_live < 15), ]
cfa.cont.configural.sugar.old <- cfa(cfa.model.sugar.old, data.cont,
estimator='WLSMV', group = 'subregion_country_live')
fitMeasures(cfa.cont.configural.sugar.old)[fits]
###
### metric
cfa.cont.metric.sugar.old <- cfa(cfa.model.sugar.old, data.cont,
estimator='WLSMV', group = 'subregion_country_live',
group.equal='loadings')
fitMeasures(cfa.cont.metric.sugar.old)[fits]
fitMeasures(cfa.cont.metric.sugar.old)[fits]-fitMeasures(cfa.cont.configural.sugar.old)[fits]
# alignment by gender for group mean comparison
par.sugar.old.sex <- invariance_alignment_cfa_config(dat = data.mi[,vars.sugar.young],
group = data.mi$Sex,
estimator='WLSMV')
# do alignment
mod1.sugar.old.sex <- invariance.alignment(lambda = par.sugar.old.sex$lambda, nu =
par.sugar.old.sex$nu,
align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.sugar.old.sex$es.invariance['R2',]
mod1.sugar.old.sex$pars$alpha0
mod1.sugar.old.sex$pars$psi0
-0.2568157/0.9589563
table(data.mi$Sex)
describeBy(data.mi$sugar_give,data.mi$Sex)
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.mi[,vars.sugar.young],
group = data.mi$subregion_country_live,
estimator='WLSMV')
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.young],
group = data.cont$subregion_country_live,
estimator='WLSMV')
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.young],
group = data.cont$subregion_country_live,
estimator='WLSMV')
par.sugar.old.cont
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.young],
group = data.cont$subregion_country_live,
estimator='WLSMV')
table(data.cont$subregion_country_live)
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.old],
group = data.cont$subregion_country_live,
estimator='WLSMV')
# alignment by gender for group mean comparison
par.sugar.old.sex <- invariance_alignment_cfa_config(dat = data.mi[,vars.sugar.old],
group = data.mi$Sex,
estimator='WLSMV')
# do alignment
mod1.sugar.old.sex <- invariance.alignment(lambda = par.sugar.old.sex$lambda, nu =
par.sugar.old.sex$nu,
align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.sugar.old.sex$es.invariance['R2',]
mod1.sugar.old.sex$pars$alpha0
mod1.sugar.old.sex$pars$psi0
.37*.37
#### cross-subcontinent invariance test
# drop no subcontinent
data.cont <- data.mi[(data.mi$subregion_country_live < 15), ]
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.old],
group = data.cont$subregion_country_live,
estimator='WLSMV')
nrow(data.cont)
data.cont[68282,]
class(data.mi$subregion_country_live)
# alignment by subregion for group mean comparison
par.sugar.old.cont <- invariance_alignment_cfa_config(dat = data.cont[,vars.sugar.old],
group = data.cont$subregion_country_live,
estimator='WLSMV')
# alignment by subregion for group mean comparison
ipars <- parameterEstimates(cfa.cont.configural.sugar.old)
lambda <- matrix( ipars[ ipars$op=="=~", "est"], nrow=14,
byrow=TRUE)
colnames(lambda) <- vars.sugar.old
colnames(nu) <- vars.sugar.old
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=15),  byrow=TRUE)
colnames(nu) <- vars.sugar.old
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=14),  byrow=TRUE)
colnames(nu) <- vars.sugar.old
# alignment by subregion for group mean comparison
ipars <- parameterEstimates(cfa.cont.configural.sugar.old)
lambda <- matrix( ipars[ ipars$op=="=~", "est"], nrow=14,
byrow=TRUE)
colnames(lambda) <- vars.sugar.old
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=14),  byrow=TRUE)
colnames(nu) <- vars.sugar.old
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=14,  byrow=TRUE)
colnames(nu) <- vars.sugar.old
# do alignment
mod1.sugar.old.cont <- invariance.alignment(lambda =lambda, nu =
nu,
align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.sugar.old.cont$es.invariance['R2',]
mod1.sugar.old.cont$pars$alpha0
mod1.sugar.old.cont$pars$psi0
#### cross-subcontinent invariance test
# drop no subcontinent
data.cont <- data.mi
# sorting
data.cont <- data.cont [order(data.cont$subregion_country_live)]
#### cross-subcontinent invariance test
# drop no subcontinent
data.cont <- data.mi
# sorting
data.cont <- data.cont [order(data.cont$subregion_country_live),]
data.cont <- data.mi[(data.mi$subregion_country_live < 15), ]
table(data.cont)
# alignment by subregion for group mean comparison
ipars <- parameterEstimates(cfa.cont.configural.sugar.old)
lambda <- matrix( ipars[ ipars$op=="=~", "est"], nrow=14,
byrow=TRUE)
colnames(lambda) <- vars.sugar.old
nu <- matrix( ipars[ ipars$op=="~1"  & ipars$se !=0, "est" ], nrow=14,  byrow=TRUE)
colnames(nu) <- vars.sugar.old
# do alignment
mod1.sugar.old.cont <- invariance.alignment(lambda =lambda, nu =
nu,
align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.sugar.old.cont$es.invariance['R2',]
mod1.sugar.old.cont$pars$alpha0
mod1.sugar.old.cont$numb_items
mod1.sugar.old.cont$wgt
mod1.sugar.old.cont$eps
mod1.sugar.old.cont$lambda.aligned
for (i in 1:14){
if (i == 1){
# create new matrix
data.aligned <- data.cont[data.cont$subregion_country_live==i,]
# aligned factor score
F.SY <- aligned.factor.scores(mod1.sugar.old.cont$lambda.aligned[i,],
mod1.sugar.old.cont$nu.aligned[i,],
data.cont[data.cont$subregion_country_live==i,vars.sugar.old])
data.aligned$ASR_OWMS <- t(F.SY)
}else
{
# bind
current <- data.cont[data.cont$subregion_country_live==i,]
F.SY <- aligned.factor.scores(mod1.sugar.old.cont$lambda.aligned[i,],
mod1.sugar.old.cont$nu.aligned[i,],
current[,vars.sugar.old])
current$ASR_OWMS <- t(F.SY)
data.aligned <- rbind(data.aligned,current)
}
}
corr.test(data.aligned[,c('ASR_OWMS','sugar_give')])
describeBy(data.aligned$ASR_OWMS,group=data.aligned$subregion_country_live)
mod1.sugar.old.cont
# anova
oneway.test(ASR_OWMS~subregion_country_live,data=data.aligned)
# anova
library(multcomp)
TukeyHSD(aov(data.aligned$ASR_OWMS~data.aligned$subregion_country_live))
TukeyHSD(aov(data.aligned$ASR_OWMS~as.factor(data.aligned$subregion_country_live)))
cohens_d(data.aligned[data.aligned$subregion_country_live==1,]$ASR_OWMS,data.aligned[data.aligned$subregion_country_live==2,]$ASR_OWMS)
cohens_d(data.aligned[data.aligned$subregion_country_live==14,]$ASR_OWMS,data.aligned[data.aligned$subregion_country_live==13,]$ASR_OWMS)
cohens_d(data.aligned[data.aligned$subregion_country_live==11,]$ASR_OWMS,data.aligned[data.aligned$subregion_country_live==8,]$ASR_OWMS)
library(lmerTest)
library(brms)
library(EMAtools)
library(sjstats)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3a_R1.RData")
performance::icc(lmer.pss.2)
performance::icc(lmer.res.2)
# icc test
lmer.res.2 <- lmer (resilience ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered)
performance::icc(lmer.res.2)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3bs_R1.RData")
# ICC
performance::icc(freq.pss.2)
# icc
performance::icc(freq.res.1)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/stress_H3d_R1.RData")
log(1000000)
log10(1000000)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1/SEM.RData")
fitmeasures(fit.both)
library(lavaan)
library(blavaan)
#
load('../Stress_aligned.RData')
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress/R1")
library(lavaan)
library(blavaan)
#
load('../Stress_aligned.RData')
model.res <-'
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS
SS ~~ GID
'
fit.res <- sem(model.res,data=data.filtered, estimator='DWLS')
fitmeasures(fit.res)
model.pss <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS
SS ~~ GID
'
fit.pss <- sem(model.pss,data=data.filtered,estimator='DWLS')
fitmeasures(fit.pss)
fit.both <- sem(model.both,data=data.filtered,estimator='dwls')
fitmeasures(fit.pss)
summary(fit.pss)
model.both <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS
SS ~~ GID
PSS ~~ RES
'
fit.both <- sem(model.both,data=data.filtered,estimator='dwls')
fitmeasures(fit.both)
summary(fit.both)
summary(fit.pss)
summary(fit.res)
model.both <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS
SS ~~ GID
PSS ~~ 0*RES
'
fit.both <- sem(model.both,data=data.filtered,estimator='dwls')
fitmeasures(fit.both)
summary(fit.both)
model.pss <- '
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10 + GID + SS+
sps+gender + education + work_location + age+
SSS_faml+ relationship_status
SS ~~ GID
'
fit.pss <- sem(model.pss,data=data.filtered,estimator='DWLS')
fitmeasures(fit.pss)
summary(fit.pss)
model.res <-'
GID =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral
SS =~ secondary_stressors__1 + secondary_stressors__2+secondary_stressors__3+
secondary_stressors__4
RES =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6 + GID + SS+
sps+gender + education + work_location + age+
SSS_faml+ relationship_status
SS ~~ GID
'
fit.res <- sem(model.res,data=data.filtered, estimator='DWLS')
fitmeasures(fit.res)
summary(fit.res)
summary(fit.res,standardized=T)
