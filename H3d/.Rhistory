load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_H1.RData")
library(psych)
describe(data.filtered$resilience_1)
library(brms)
load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_H2.RData")
b.h2a.2
options(width=2000)
b.h2a.2
b.h2b.2
b.h2c.2
med_result
load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_H3.RData")
b.h3a.2
b.h3b.2
b.h3c.2
med3_result
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
install.packages("pacman")
install.packages("pacman")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,
rio,
psych,
car,
lavaan,
sirt,
here)
# set the current directory
here::i_am('README.md')
here::here()
# load data
dat <- import(here("_cleandata/Final_COVIDiSTRESS_Vol2_cleaned.csv"))
colnames(dat)
vars <- colnames(dat)[80:87]
vars
test <- dat[,vars]
library(EFAtools)
N_FACTORS(test)
test1<-dat[dat$UserLanguage=='EN',vars]
N_FACTORS(test1)
N_FACTORS(test1,method='ML')
EFA_SPSS
EFA(test1,n_factors=1)
EFA(test1,n_factors=1,type='SPSS')
EFA(test1,n_factors=2,type='SPSS')
EFA(test1,n_factors=2,type='SPSS',rotation='promax')
EFA(test1,n_factors=2,type='SPSS',rotation='varimax')
N_FACTORS(test1,method='ML')
EFA(test1,n_factors=1,type='SPSS')
EFA(test1,n_factors=2,type='SPSS')
N_FACTORS(test1[,-7],method='ML')
EFA(test1[,-7])
EFA(test1[,-7],n_factors=1)
# do correction
library(BayesFactor)
library("oro.nifti")
correct_scale<-function(filename_mask = 'mask.nii'){
# read mask file
MaskImg <- readNIfTI(filename_mask)
MaskImgData = oro.nifti::img_data(MaskImg)
# get mask size image
X <- dim(MaskImg)[1]
Y <- dim(MaskImg)[2]
Z <- dim(MaskImg)[3]
# let's count non-zero and non-nan voxel number
count <- 0
for (i in 1:X){
for (j in 1:Y){
for (k in 1:Z){
if ((MaskImgData[i,j,k] != 0) && !(is.nan(MaskImgData[i,j,k])) ){
# non zero and non nan -> count
count <- count + 1
}
}
}
}
# get combination (to find the # of comparison groups)
# find m where mC2 = total voxel number
# start from 2
config_scale <- .707
config_alpha <- .05
now <- 2
while(1){
# calculate current combination
combination <- now * (now-1)/2
# combination >= count (non-zero non-nan voxel #?)
if (combination >= count){
break
}
# the goal not achieved, then, increase 1
now <- now + 1
}
# finalize group number
Group <- now
# then, p(H01) = p(H0)^(2/m) where m = Group
# calculate the corrected threshold value
# .95 ^ (2/Group)
corr_p <- (1-config_alpha)^(2/Group)
# time to look for Cauchy distribution scale SCALE_NEW that satisfies
# pcauchy(qcauchy(.95,scale=.707), SCALE_NEW) = corr_p
default_point <- qcauchy((1-config_alpha),scale=config_scale)
# set desired precision
# default = (1-corr_p) / 10
precision <- (1-corr_p) / 10
# starting from the default scale .707
scale_default <- config_scale
scale_current <- scale_default
scale_previous <- scale_default
trial <- 1
while(1)
{
# until the precision is achieved...
# if first trial,
if (trial == 1)
{
# starting from the half of the default scale
scale_current <- scale_default / 2.0
# calculate the current culumative pdf at default_point
current_cpdf <- pcauchy(default_point, scale= scale_current)
# calculate difference
diff <- abs(corr_p - current_cpdf)
# diff <= precision?
if (diff <= precision){
# stop here
break
}
# if not, trial <- trial + 1
trial <- trial + 1
# and also find the dirrection
if ((corr_p - current_cpdf) > 0)
{
# scale_current should be decreased, so right direction
direction <- -1
}
else
{
# scale_current should be increased, so let's tweak it
direction <- 1
}
}
else{
# if not the first trial...
# find the distance between current and previous scale
distance <- abs(scale_current - scale_previous)
# then, set the current scale as start_point + distance /2 * direction
# also, update the previous scale
scale_previous <- scale_current
scale_current <- scale_current + distance / 2.0 * direction
# calculate the current culumative pdf at default_point
current_cpdf <- pcauchy(default_point,scale= scale_current)
# calculate difference
diff <- abs(corr_p - current_cpdf)
# diff <= precision?
if (diff <= precision){
# stop here
break
}
# if not, trial <- trial + 1
trial <- trial + 1
# and also find the dirrection
if ((corr_p - current_cpdf) > 0)
{
# scale_current should be decreased, so right direction
direction <- -1
}
else
{
# scale_current should be increased, so let's tweak it
direction <- 1
}
}
}
# found current scale!
# let's use this scale for cauchy prior distribution
return(scale_current)
}
adjust_cauchy_scale(4.7854359796610275,1.5598297650412472,0.05145979448703311)
# do correction
library(BayesFactor)
library("oro.nifti")
# correcting Cauchy prior based on effect size and proportion of predicted positives
# inputs: contrast, noise (standard deviation, etc.), proportion of positives, percentile (e.g., .9? .95?)
# precision (default = 1e-9), max iterations (default = 10000)
# output: corrected Cauchy prior
# function to find
f <- function(x){
# pcauchy
# ES should be defined globally
# percentile should also be defined globally
fx<-pcauchy(ES,scale=x)-percentile
return(c(fx))
}
adjust_cauchy_scale<-function(contrast, noise, proportion, percentile = .9, precision = 1e-9, max_iter=10000)
{
# calculate average ES
ES <<- contrast / noise * proportion
# put percentile in global
percentile<<-percentile
# numerically estimate scale
# from 0 to 100, start from 50
now <- 50
from <- 0
to <- 100
iteration<-0
while(1){
iteration <- iteration + 1
# calculate pcauchy with the current scale
current <- f(now)
# difference?
if (abs(current) <= precision){
# within the boundary of the allowed precision. Stop
break
}
# if not, then move for 1/2
# if difference < 0, it indicates that the scale should increase
if (current >0){
from<-now
now <- (now + to)/2
}else{
# else, then the scale should decrease
to<-now
now <- (from + now)/2
}
# if iteration > max_iteration, stop
if (iteration >= max_iter){
break
}
}
# return iteration # and result
# if convergence failed then return -1
if (iteration >= max_iter){
return (-1)
}else{
return(now)
}
}
correct_scale<-function(filename_mask = 'mask.nii'){
# read mask file
MaskImg <- readNIfTI(filename_mask)
MaskImgData = oro.nifti::img_data(MaskImg)
# get mask size image
X <- dim(MaskImg)[1]
Y <- dim(MaskImg)[2]
Z <- dim(MaskImg)[3]
# let's count non-zero and non-nan voxel number
count <- 0
for (i in 1:X){
for (j in 1:Y){
for (k in 1:Z){
if ((MaskImgData[i,j,k] != 0) && !(is.nan(MaskImgData[i,j,k])) ){
# non zero and non nan -> count
count <- count + 1
}
}
}
}
# get combination (to find the # of comparison groups)
# find m where mC2 = total voxel number
# start from 2
config_scale <- .707
config_alpha <- .05
now <- 2
while(1){
# calculate current combination
combination <- now * (now-1)/2
# combination >= count (non-zero non-nan voxel #?)
if (combination >= count){
break
}
# the goal not achieved, then, increase 1
now <- now + 1
}
# finalize group number
Group <- now
# then, p(H01) = p(H0)^(2/m) where m = Group
# calculate the corrected threshold value
# .95 ^ (2/Group)
corr_p <- (1-config_alpha)^(2/Group)
# time to look for Cauchy distribution scale SCALE_NEW that satisfies
# pcauchy(qcauchy(.95,scale=.707), SCALE_NEW) = corr_p
default_point <- qcauchy((1-config_alpha),scale=config_scale)
# set desired precision
# default = (1-corr_p) / 10
precision <- (1-corr_p) / 10
# starting from the default scale .707
scale_default <- config_scale
scale_current <- scale_default
scale_previous <- scale_default
trial <- 1
while(1)
{
# until the precision is achieved...
# if first trial,
if (trial == 1)
{
# starting from the half of the default scale
scale_current <- scale_default / 2.0
# calculate the current culumative pdf at default_point
current_cpdf <- pcauchy(default_point, scale= scale_current)
# calculate difference
diff <- abs(corr_p - current_cpdf)
# diff <= precision?
if (diff <= precision){
# stop here
break
}
# if not, trial <- trial + 1
trial <- trial + 1
# and also find the dirrection
if ((corr_p - current_cpdf) > 0)
{
# scale_current should be decreased, so right direction
direction <- -1
}
else
{
# scale_current should be increased, so let's tweak it
direction <- 1
}
}
else{
# if not the first trial...
# find the distance between current and previous scale
distance <- abs(scale_current - scale_previous)
# then, set the current scale as start_point + distance /2 * direction
# also, update the previous scale
scale_previous <- scale_current
scale_current <- scale_current + distance / 2.0 * direction
# calculate the current culumative pdf at default_point
current_cpdf <- pcauchy(default_point,scale= scale_current)
# calculate difference
diff <- abs(corr_p - current_cpdf)
# diff <= precision?
if (diff <= precision){
# stop here
break
}
# if not, trial <- trial + 1
trial <- trial + 1
# and also find the dirrection
if ((corr_p - current_cpdf) > 0)
{
# scale_current should be decreased, so right direction
direction <- -1
}
else
{
# scale_current should be increased, so let's tweak it
direction <- 1
}
}
}
# found current scale!
# let's use this scale for cauchy prior distribution
return(scale_current)
}
adjust_cauchy_scale(4.7854359796610275,1.5598297650412472,0.05145979448703311)
adjust_cauchy_scale(2.337460017950926,0.09000875833726335,0.20115387840324436)
adjust_cauchy_scale(5.2238155142807825,2.337460017950926,0.09000875833726335)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc")
# hypothesis testing
library(lmerTest)
library(brms)
library(EMAtools)
library(sjstats)
# pss ~ secondary
options(width = 2000)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
pss.10
pss.20
log (pss.21$bf[1])
# hypothesis testing
hypothesis(pss.2,'secondary>0')
summary(freq.pss.2)
conft.pss.2<-confint(freq.pss.2)
conft.pss.2
freq.pss.1 <- lmer(pss ~ secondary+ work_location + age+
SSS_faml+ relationship_status+ education+
(1|residing_country),
data=data.filtered)
EMAtools::lme.dscore(freq.pss.1,data.filtered,'lme4')
bf.int
# ICC
performance::icc(freq.pss.2)
res.10
res.20
res.21
# 1 is better, so random intercept model will be used
hypothesis(res.1, 'secondary < 0')
summary(freq.res.1)
EMAtools::lme.dscore(freq.res.1,data=data.filtered,'lme4')
conf.res <- confint(freq.res.1)
conf.res
# icc
performance::icc(freq.res.1)
res.int.1
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
bf.int
log(bf.int$bf[1])
log(bf.main$bf[1])
# main effect test
hypothesis (bf.int, 'secondary > 0') # Inf
library(lmerTest)
library(brms)
library(EMAtools)
# main effect test
hypothesis (pss.identity, 'secondary > 0') # Inf
hypothesis (pss.identity, 'identity < 0') # Inf
pss.identity
hypothesis (bf.int, 'secondary:identity > 0')
hypothesis (pss.identity, 'secondary:identity > 0')
hypothesis (pss.identity, 'secondary:identity < 0')
hypothesis (pss.identity, 'secondary:identity > 0')
# frequentist
freq.pss.int <- lmer(pss ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary+identity|residing_country),data.filtered)
conf.pss <- confint(freq.pss.int)
hypothesis (pss.identity, 'secondary:identity < 0')
conf.pss
summary(freq.pss.int)
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
freq.pss.int.1 <- lmer(pss ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),data.filtered)
lme.dscore(freq.pss.int.1,data.filtered,'lme4')
conf.pss
summary(freq.pss.int)
summary(freq.pss.int)
res.2 <- brms::brm(resilience ~ secondary+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
res.int <- brms::brm(resilience ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary+identity|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
# bfs
bf.res.int <- bayes_factor(res.int,res.2,log=T)
bf.res.int
# hypothesis
hypothesis(res.int, 'secondary < 0')
hypothesis(res.int, 'identity > 0')
hypothesis(res.int, 'secondary:identity > 0')
hypothesis(res.int, 'secondary:identity < 0')
hypothesis(res.int, 'secondary:identity > 0')
# frequentist
freq.res.int <- lmer(resilience ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+secondary+identity|residing_country),data.filtered)
summary(freq.res.int)
2.976e+01
freq.pss.int
summary(freq.pss.int)
lme.dscore(freq.pss.int,data.filtered,'lme4')
freq.res.int1 <- lmer(resilience ~ secondary*identity+ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),data.filtered)
lme.dscore(freq.pss.int1,data.filtered,'lme4')
lme.dscore(freq.res.int1,data.filtered,'lme4')
conf.res <- confint(freq.res.int)
save.image("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
conf.res
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
summary(conf.res)
summary(freq.pss.2)
summary(freq.res.2)
summary(freq.res.1)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3a/stress_H3a.RData")
summary(lmer.pss.2)
# ICC calculation
lmer.pss.2 <- lmer (pss ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered)
summary(lmer.pss.2)
# icc test
lmer.res.2 <- lmer (resilience ~ primary_stressor_avg + gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+primary_stressor_avg|residing_country),
data=data.filtered)
summary(lmer.res.2)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3d")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3d/stress_H3d.RData")
bf.pss.10
bf.pss.20
bf.pss.21
# each path bayes test
hypothesis(med.pss.2, 'sps_identity>0') # Inf
hypothesis(med.pss.2, 'pss_identity<0') # 1999
hypothesis(med.pss.2, 'pss_sps<0') # Inf
hypothesis(med.pss.2, 'pss_identity<0') # 1999
log(1999)
bf.res.10
bf.res.20
bf.res.21
bayes_factor(med.res.2,med.res.1)
# path bayes factor
hypothesis(med.res.2, 'sps_identity>0') # Inf
hypothesis(med.res.2, 'resilience_identity>0') # Inf
hypothesis(med.res.2, 'resilience_sps>0') # Inf
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
bf.gender
bf.edu
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3_groupid.RData")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/H3bc/Vaccine_H3bs.RData")
