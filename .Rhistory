# load data
data<-read.csv('Final_COVIDiSTRESS_Vol2_cleaned.csv')
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress")
# load data
data<-read.csv('Final_COVIDiSTRESS_Vol2_cleaned.csv')
colnaems(data)
colnames(data)
# item names to be aligned
items.pss <- colnames(data)[45:54]
items.sps <- colnames(data)[76:78]
items.identity <- colnames(data)[173:176]
items.resilience <- colnames(data)[120:125]
items.pss
items.sps
items.identity
items.resilience
library(psych)
describe(data[,items.resilience])
# load data
data<-read.csv('Final_COVIDiSTRESS_Vol2_cleaned.csv')
# item names to be aligned
items.pss <- colnames(data)[45:54]
items.sps <- colnames(data)[76:78]
items.identity <- colnames(data)[173:176]
items.resilience <- colnames(data)[120:125]
# reverse coded items
data[,items.resilience[2]] <- 8-data[,items.resilience[2]]
data[,items.resilience[4]] <- 8-data[,items.resilience[4]]
data[,items.resilience[6]] <- 8-data[,items.resilience[6]]
# extract languages with n >= 100
n.langs <- table(data$UserLanguage)
list.langs <- labels(n.langs)[[1]]
langs.include <- list.langs[n.langs>=100]
n.include <- n.langs[n.langs>=100]
# extract data
for (i in 1:length(langs.include)){
if (i == 1){
data.mi <- data[data$UserLanguage == langs.include[i],]
}else{
current <- data[data$UserLanguage == langs.include[i],]
data.mi <- rbind(data.mi,current)
}
}
items.pss
# general CFA: PSS
cfa.model.pss <- 'PSS =~ perceived_stress_sca_1 + perceived_stress_sca_2+
perceived_stress_sca_3 + perceived_stress_sca_4 + perceived_stress_sca_5+
perceived_stress_sca_6 + perceived_stress_sca_7 + perceived_stress_sca_8+
perceived_stress_sca_9 + perceived_stress_sca_10'
cfa.whole.pss <- cfa(model=cfa.model.pss,data=data.mi,estimator='WLSMV')
library(psych)
library(lavaan)
library(sirt)
library(MASS)
cfa.whole.pss <- cfa(model=cfa.model.pss,data=data.mi,estimator='WLSMV')
result.cfa.whole.pss<-standardizedSolution(cfa.whole.pss)
result.cfa.whole.pss[result.cfa.whole.pss$op               =='=~',]
fitMeasures(cfa.whole.pss)[fits]
# set and examine fitmeasures
fits <- c('rmsea.scaled','srmr','cfi.scaled','tli.scaled')
fitMeasures(cfa.whole.pss)[fits]
cfa.whole.pss <- cfa(model=cfa.model.pss,data=data.mi,estimator='WLSMV', group =
data.mi$UserLanguage)
cfa.whole.pss <- cfa(model=cfa.model.pss,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.pss)[fits]
# measurement alignment test
# extract parameters
par.pss <- invariance_alignment_cfa_config(dat = data.mi.pss[,items.pss],
group = data.mi$UserLanguage)
# measurement alignment test
# extract parameters
par.pss <- invariance_alignment_cfa_config(dat = data.mi[,items.pss],
group = data.mi$UserLanguage)
# do alignment
mod1.pss <- invariance.alignment(lambda = par.pss$lambda, nu =
par.pss$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.pss$es.invariance['R2',]
# function for factor score adjustment
aligned.factor.scores <- function(lambda,nu,y){
# calculate inverse matrix
lambda1 <- ginv((lambda))
# create matrix for nu
ns <- nrow(y)
nus <- matrix(nu,nrow=ns,ncol=length(nu),byrow=T)
# y - nu
y_nu <- y - nus
# f = inv(lambda)*(y-nu)
F <- lambda1 %*% t(as.matrix(y_nu))
}
items.sps
# general CFA: sps
cfa.model.sps <- 'SPS =~ perceived_support_1_midneutral +
perceived_support_2_midneutral+perceived_support_3_midneutral+
perceived_support_4_midneutral'
cfa.whole.sps <- cfa(model=cfa.model.sps,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
# general CFA: sps
cfa.model.sps <- 'SPS =~ perceived_support_1_midneutral +
perceived_support_2_midneutral+perceived_support_3_midneutral'
cfa.whole.sps <- cfa(model=cfa.model.sps,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.sps)[fits]
cfa.metric.sps <- cfa(model=cfa.model.sps,data=data.mi,estimator='WLSMV', group =
'UserLanguage', group.equal='loadings')
fitMeasures(cfa.metric.sps)[fits]
# measurement alignment test
# extract parameters
par.sps <- invariance_alignment_cfa_config(dat = data.mi[,items.sps],
group = data.mi$UserLanguage)
# do alignment
mod1.sps <- invariance.alignment(lambda = par.sps$lambda, nu =
par.sps$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.sps$es.invariance['R2',]
items.identity
colnames(data)
items.identity
# general CFA: identity
cfa.model.identity <- 'Identity =~ identity_1_0neutral + identity_2_0neutral
identity_3_0neutral+identity_4_0neutral'
cfa.whole.identity<- cfa(model=cfa.model.identity,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
# general CFA: identity
cfa.model.identity <- 'Identity =~ identity_1_0neutral + identity_2_0neutral+
identity_3_0neutral+identity_4_0neutral'
cfa.whole.identity<- cfa(model=cfa.model.identity,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.identity)[fits]
# measurement alignment test
# extract parameters
par.identity <- invariance_alignment_cfa_config(dat = data.mi[,items.identity],
group = data.mi$UserLanguage)
# do alignment
mod1.identity <- invariance.alignment(lambda = par.identity$lambda, nu =
par.identity$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.identity$es.invariance['R2',]
items.resilience
# general CFA: resilience
cfa.model.resilience <- 'Identity =~ resilience_1 + resilience_2+resilience_3+
resilience_4+resilience_5+resilience_6'
cfa.whole.resilience<- cfa(model=cfa.model.resilience,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.resilience)[fits]
# measurement alignment test
# extract parameters
par.resilience <- invariance_alignment_cfa_config(dat = data.mi[,items.resilience],
group = data.mi$UserLanguage)
# do alignment
mod1.resilience <- invariance.alignment(lambda = par.resilience$lambda, nu =
par.resilience$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.resilience$es.invariance['R2',]
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.pss]])
data.aligned$pss <- t(F.pss)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
current$pss <- t(F.pss)
data.aligned <- rbind(data.aligned,current)
}
}
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.pss])
data.aligned$pss <- t(F.pss)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
current$pss <- t(F.pss)
data.aligned <- rbind(data.aligned,current)
}
}
corr.test(data$PSS_10_avg)
corr.test(data.aligned$pss,data.aligned$PSS_10_avg)
colnames(F.pss)
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.sps])
data.aligned$pss <- t(F.pss)
data.aligned$sps <- t(F.sps)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
current[,items.sps])
current$pss <- t(F.pss)
current$sps <- t(F.sps)
data.aligned <- rbind(data.aligned,current)
}
}
corr.test(data.aligned$pss,data.aligned$PSS_10_avg)
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
current[,items.sps])
F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
mod1.identity$nu.aligned[i,],
current[,items.identity])
current$pss <- t(F.pss)
current$sps <- t(F.sps)
current$identity <- t(F.id)
data.aligned <- rbind(data.aligned,current)
}
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.sps])
F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
mod1.identity$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.identity])
data.aligned$pss <- t(F.pss)
data.aligned$sps <- t(F.sps)
data.aligned$identity <- t(F.id)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
current[,items.sps])
F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
mod1.identity$nu.aligned[i,],
current[,items.identity])
current$pss <- t(F.pss)
current$sps <- t(F.sps)
current$identity <- t(F.id)
data.aligned <- rbind(data.aligned,current)
}
}
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.sps])
F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
mod1.identity$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.identity])
F.rs <- aligned.factor.scores(mod1.resilience$lambda.aligned[i,],
mod1.resilience$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],items.resilience])
data.aligned$pss <- t(F.pss)
data.aligned$sps <- t(F.sps)
data.aligned$identity <- t(F.id)
data.aligned$resilience <- t(F.id)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.pss <- aligned.factor.scores(mod1.pss$lambda.aligned[i,],
mod1.pss$nu.aligned[i,],
current[,items.pss])
F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
mod1.sps$nu.aligned[i,],
current[,items.sps])
F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
mod1.identity$nu.aligned[i,],
current[,items.identity])
F.rs <- aligned.factor.scores(mod1.resilience$lambda.aligned[i,],
mod1.resilience$nu.aligned[i,],
current[,items.resilience])
current$pss <- t(F.pss)
current$sps <- t(F.sps)
current$identity <- t(F.id)
current$resilience <- t(F.rs)
data.aligned <- rbind(data.aligned,current)
}
}
corr.test(data.aligned$resilience,data.aligned$RES_6_avg)
# save aligned datafile
save.image(file='Stress_aligned.RData')
