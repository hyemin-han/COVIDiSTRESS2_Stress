setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress")
library(psych)
library(lavaan)
library(sirt)
library(MASS)
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/Stress_aligned.RData")
describe(data$primary_stressors_4)
describe(data$primary_stressors_1)
describe(data$primary_stressors_2)
describe(data$primary_stressors_3)
describe(data$primary_stressors_4)
# load dataset
load('Stress_aligned.RData')
colnames(data.aligned)
colnames(data.aligned[58:61])
# calculate primary stressor
data.aligned$primary_stressors_avg <- rowMeans(data.aligned[58:61], na.rm = T)
describe(data.aligned$primary_stressors_avg)
head(data.aligned[,58:61])
# load dataset
load('Stress_aligned.RData')
# calculate primary stressor
data.aligned$primary_stressors_avg <- rowMeans(data.aligned[,58:61], na.rm = T)
describe(data.aligned$primary_stressors_avg)
table(data.aligned$primary_stressors_1.NAppl)
table(data.aligned$primary_stressors_1)
library(psych)
library(lavaan)
library(sirt)
library(MASS)
# function for factor score adjustment
aligned.factor.scores <- function(lambda,nu,y){
# calculate inverse matrix
lambda1 <- ginv((lambda))
# create matrix for nu
ns <- nrow(y)
nus <- matrix(nu,nrow=ns,ncol=length(nu),byrow=T)
# y - nu
y_nu <- y - nus
# f = inv(lambda)*(y-nu)
F <- lambda1 %*% t(as.matrix(y_nu))
}
# Load the cleaned csv file
# load data
data<-read.csv('Final_COVIDiSTRESS_Vol2_cleaned.csv')
# item names to be aligned
items.pss <- colnames(data)[45:54]
items.sps <- colnames(data)[76:78]
items.identity <- colnames(data)[173:176]
items.resilience <- colnames(data)[120:125]
colnames(data)
items.ps <- colnames(data)[58:61]
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/Stress_aligned.RData")
#####
# 5. primary stressor
cfa.model.ps <- 'PS =~ primary_stressors_1 + primary_stressors_2+primary_stressors_3+
primary_stressors_4'
cfa.whole.ps<- cfa(model=cfa.model.ps,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.ps)[fits]
alpha(data[,58:61])
# measurement alignment test
# extract parameters
par.ps <- invariance_alignment_cfa_config(dat = data.mi[,items.ps],
group = data.mi$UserLanguage)
# do alignment
mod1.ps <- invariance.alignment(lambda = par.ps$lambda, nu =
par.ps$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.resilience$mod1.ps['R2',]
# test performance
mod1.ps$es.invariance['R2',]
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress")
# load dataset
load('Stress_aligned.RData')
# do regression
reg.h3a.pss <- lm(data.aligned$pss ~ data.aligned$primary_stressor_avg)
reg.h3a.pss
reg.h3a.rs <- lm(data.aligned$rs ~ data.aligned$primary_stressor_avg)
reg.h3a.rs <- lm(data.aligned$resilience ~ data.aligned$primary_stressor_avg)
reg.h3a.rs
summary(reg.h3a.rs)
library(lmerTest)
colnames(data$residing_country)
# do mlm
lreg.h3a.pss <- lmer(pss~primary_stressor_avg+(1|residing_country), data=data.aligned)
# do mlm
lreg.h3a.pss.0 <- lmer(pss~(1|residing_country), data=data.aligned)
lreg.h3a.pss.1 <- lmer(pss~primary_stressor_avg+(1|residing_country), data=data.aligned)
lreg.h3a.pss.2 <- lmer(pss~primary_stressor_avg+(1+primary_stressor_avg|residing_country), data=data.aligned)
lreg.h3a.pss.2
summary(lreg.h3a.pss.2)
summary(lreg.h3a.pss.1)
summary(lreg.h3a.pss.2)
summary(lreg.h3a.pss.1)
anova(lreg.h3a.pss.0,lreg.h3a.pss.1      )
AIC(lreg.h3a.pss.0,lreg.h3a.pss.1,lreg.h3a.pss.2)
BIC(lreg.h3a.pss.0,lreg.h3a.pss.1,lreg.h3a.pss.2)
library(brms)
# brms
prior.coef <- brms::prior(cauchy(0.,1),class='b')
# brms
prior.coef <- brms::prior(cauchy(0.,1),class='b')
breg.h3a.pss.2 <- brm(pss~primary_stressor_avg+(1+primary_stressor_avg|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3a.pss.2
hypothesis('primary_stressor_avg=0',breg.h3a.pss.2)
hypothesis('primary_stressor_avg = 0',breg.h3a.pss.2)
?hypothesis
hypothesis(breg.h3a.pss.2,'primary_stressor_avg = 0')
library(bayestestR)
hdi(breg.h3a.pss.2)
rope(breg.h3a.pss.2)
### mediation pilot
breg.h3da.2 <- brm(pss~identity+(1+primary_stressor_avg|
identity), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
### mediation pilot
breg.h3da.pss.2 <- brm(pss~identity+(1+primary_stressor_avg|
identity), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.2
hdi(breg.h3da.pss.2)
breg.h3da.pss.2 <- brm(pss~identity+(1+identity|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.m.2<- brm(pss~identity+sps+(1+identity+sps|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.m.2
breg.h3da.pss.2
h3da.test <- brm(breg.h3da.pss.m.2+breg.h3da.pss.2+set_rescor(F),data=data.aligned)
model.3da.pss.2 <- bf(pss~identity+(1+identity|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
model.3da.pss.2 <- bf(pss~identity+(1+identity|
residing_country))
model.3da.pss.m.2 <- bf(pss~identity+sps+(1+identity+sps|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
### mediation pilot
model.3da.pss.2 <- bf(sps~identity+(1+identity|
residing_country))
model.3da.pss.m.2 <- bf(pss~identity+sps+(1+identity+sps|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
h3da.test
sjstats::mediation(h3da.test)
bayestestR::::mediation(h3da.test)
bayestestR::mediation(h3da.test)
model.3da.rs.2 <- bf(resilience~identity+(1+identity|
residing_country))
model.3da.rs.m.2 <- bf(resilience~identity+sps+(1+identity+sps|
residing_country))
h3da.rs.test <- brm(model.3da.rs.m.2 + model.3da.rs.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
bayestestR::mediation(h3da.rs.test)
h3da.rs.test <- brm(model.3da.rs.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
h3da.rs.test
bayestestR::mediation(h3da.rs.test)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/Stress_aligned.RData")
table(data.aligned$UserLanguage)
table(data.aligned$residing_country)
table(data.aligned$residing_country)>=30
sum(table(data.aligned$residing_country)>=30)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
country.30
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=100]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
# save aligned datafile
save.image(file='Stress_aligned.RData')
table(data.filtered$residing_country)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
length(country.include
)
i<-1
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
head(data.filtered$residing_country)
country.include
n.include.c
sum(n.include.c)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
country.include
sum(country.include)
i<-1
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
country.include
n.include
n.include.c
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[(data.aligned$residing_country ==
country.include[i]) & !is.na(
data.aligned$residing_country
),]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[(data.aligned$residing_country ==
country.include[i]) & !is.na(
data.aligned$residing_country
),]
}else{
current <- data.aligned[(data.aligned$residing_country == country.include[i])
& !is.na(
data.aligned$residing_country
),]
data.filtered <- rbind(data.filtered,current)
}
}
save.image(file='Stress_aligned.
# save aligned datafile
save.image(file='Stress_aligned.RData')
