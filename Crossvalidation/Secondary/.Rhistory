}
mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.simul$es.invariance
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
par.cle$lambda
COMP
colnames(par.cle$nu) <- items.PSUP
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
par.simul <- invariance_alignment_cfa_config(dat = dat[,COMP],
group = dat$group,
estimator='WLSMV'
)
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
par.simul <- invariance_alignment_cfa_config(dat = dat[,items.PSUP],
group = dat$group,
estimator='WLSMV'
)
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 +
secondary_stressors__3 +secondary_stressors__4'
mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.simul$es.invariance
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
alpha.simul
mod1.simul$pars$alpha0
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
# simulation function
simulation_CLE <- function(times,n,data,n.include,seed=1){
# get data
data.mi <- data
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
compliance <- items.PSUP
# list for return
cor.mean <- rep(0,times)
cor.var <- rep(0,times)
R2.loading <- rep(0,times)
R2.intercept <- rep(0,times)
# simulation replication
set.seed(seed)
# repeat
j <- 1
while(1){
G <- 28 # groups
I <- 4 # items
# lambda, nu, and error_var
err_var.cle <- matrix(1, nrow=G,ncol=I)
# simulate data
# enter group mu and sigma
data.mi$COMP <- rowMeans(data.mi[,compliance])
mu<-(aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=mean, na.rm=T)[,2])
sigma <- (aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=sd, na.rm=T)[,2])
N <- rep(n,G)
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
par.simul <- invariance_alignment_cfa_config(dat = dat[,items.PSUP],
group = dat$group,
estimator='WLSMV'
)
# directly extract from cfa
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 +
secondary_stressors__3 +secondary_stressors__4'
flag <- sum(par.simul$err_var < 0)
#flag <- sum(err_var < 0)
if (flag > 0){
next
}
mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
#mod1.simul <- invariance.alignment(lambda = lambda, nu =
#                                     nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25),
#                                   optim='optim')
# true vs aligned scores
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
psi.simul <- params.simul[(params.simul$op=='~~')&(params.simul$lhs=='PSUP'),'est']
correlation.psi <- corr.test(psi.simul,mod1.simul$pars$psi0,method='spearman')$r
cor.mean[j] <- correlation
cor.var[j] <- correlation.psi
R2.loading[j] <- mod1.simul$es.invariance['R2',1]
R2.intercept[j] <- mod1.simul$es.invariance['R2',2]
if (flag ==0){
break
}
}
# make matrix
# with error flag
to.return <-cbind(cor.mean,cor.var,R2.loading,R2.intercept)
to.return <- data.matrix(to.return)
message  (sprintf('%d/%d Done',j,times))
return(to.return)
}
start_100 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,100,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_100<-Sys.time()
elapsed_100 <- end_100 - start_100
# merge result
for (i in 1:times){
if (i == 1){
simulate_100 <- now[[1]]
}else{
simulate_100 <- rbind(simulate_100,now[[i]])
}
}
simulate_100
describe(simulate_100)
# n=200
# multicore processing for n=200
start_200 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,200,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_200<-Sys.time()
elapsed_200 <- end_200 - start_200
# merge result
for (i in 1:times){
if (i == 1){
simulate_200 <- now[[1]]
}else{
simulate_200 <- rbind(simulate_200,now[[i]])
}
}
simulate_200
describe(simulate_200)
# n= 500
start_500 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,500,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_500<-Sys.time()
elapsed_500 <- end_500 - start_500
# merge result
for (i in 1:times){
if (i == 1){
simulate_500 <- now[[1]]
}else{
simulate_500 <- rbind(simulate_500,now[[i]])
}
}
simulate_500
describe(simulate_500)
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
compliance <- items.PSUP
# list for return
cor.mean <- rep(0,times)
cor.var <- rep(0,times)
R2.loading <- rep(0,times)
R2.intercept <- rep(0,times)
# simulation replication
set.seed(seed)
G <- 28 # groups
I <- 4 # items
# lambda, nu, and error_var
err_var.cle <- matrix(1, nrow=G,ncol=I)
# simulate data
# enter group mu and sigma
data.mi$COMP <- rowMeans(data.mi[,compliance])
mu<-scale(aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=mean, na.rm=T)[,2])[,1]
sigma <- (aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=sd, na.rm=T)[,2])
N <- rep(n,G)
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
par.simul <- invariance_alignment_cfa_config(dat = dat[,items.PSUP],
group = dat$group,
estimator='WLSMV'
)
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 +
secondary_stressors__3 +secondary_stressors__4'
mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.simul$es.invariance
simulate_100
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
start_100 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,100,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_100<-Sys.time()
elapsed_100 <- end_100 - start_100
# merge result
for (i in 1:times){
if (i == 1){
simulate_100 <- now[[1]]
}else{
simulate_100 <- rbind(simulate_100,now[[i]])
}
}
simulate_100
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
psi.simul <- params.simul[(params.simul$op=='~~')&(params.simul$lhs=='PSUP'),'est']
correlation.psi <- corr.test(psi.simul,mod1.simul$pars$psi0,method='spearman')$r
# simulation function
simulation_CLE <- function(times,n,data,n.include,seed=1){
# get data
data.mi <- data
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
compliance <- items.PSUP
# list for return
cor.mean <- rep(0,times)
cor.var <- rep(0,times)
R2.loading <- rep(0,times)
R2.intercept <- rep(0,times)
# simulation replication
set.seed(seed)
# repeat
j <- 1
while(1){
G <- 28 # groups
I <- 4 # items
# lambda, nu, and error_var
err_var.cle <- matrix(1, nrow=G,ncol=I)
# simulate data
# enter group mu and sigma
data.mi$COMP <- rowMeans(data.mi[,compliance])
mu<-scale(aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=mean, na.rm=T)[,2])[,1]
sigma <- (aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=sd, na.rm=T)[,2])
N <- rep(n,G)
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
par.simul <- invariance_alignment_cfa_config(dat = dat[,items.PSUP],
group = dat$group,
estimator='WLSMV'
)
# directly extract from cfa
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 +
secondary_stressors__3 +secondary_stressors__4'
flag <- sum(par.simul$err_var < 0)
#flag <- sum(err_var < 0)
if (flag > 0){
next
}
mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
#mod1.simul <- invariance.alignment(lambda = lambda, nu =
#                                     nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25),
#                                   optim='optim')
# true vs aligned scores
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
psi.simul <- params.simul[(params.simul$op=='~~')&(params.simul$lhs=='PSUP'),'est']
correlation.psi <- corr.test(psi.simul,mod1.simul$pars$psi0,method='spearman')$r
cor.mean[j] <- correlation
cor.var[j] <- correlation.psi
R2.loading[j] <- mod1.simul$es.invariance['R2',1]
R2.intercept[j] <- mod1.simul$es.invariance['R2',2]
if (flag ==0){
break
}
}
# make matrix
# with error flag
to.return <-cbind(cor.mean,cor.var,R2.loading,R2.intercept)
to.return <- data.matrix(to.return)
message  (sprintf('%d/%d Done',j,times))
return(to.return)
}
start_100 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,100,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_100<-Sys.time()
elapsed_100 <- end_100 - start_100
# merge result
for (i in 1:times){
if (i == 1){
simulate_100 <- now[[1]]
}else{
simulate_100 <- rbind(simulate_100,now[[i]])
}
}
simulate_100
describe(simulate_100)
# n=200
# multicore processing for n=200
start_200 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,200,data.mi,28,i)
#  message(sprintf('%d',i))
}
end_200<-Sys.time()
elapsed_200 <- end_200 - start_200
# merge result
for (i in 1:times){
if (i == 1){
simulate_200 <- now[[1]]
}else{
simulate_200 <- rbind(simulate_200,now[[i]])
}
}
simulate_200
describe(simulate_200)
source("~/Documents/GitHub/COVIDiSTRESS2_Stress/Crossvalidation/Secondary/Secondary_alignment_test.R")
params[1:30]
params[1:30,]
# simulation function
simulation_CLE <- function(times,n,data,n.include,seed=1){
# get data
data.mi <- data
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
compliance <- items.PSUP
# list for return
cor.mean <- rep(0,times)
cor.var <- rep(0,times)
R2.loading <- rep(0,times)
R2.intercept <- rep(0,times)
# simulation replication
set.seed(seed)
# repeat
j <- 1
while(1){
G <- 28 # groups
I <- 4 # items
# lambda, nu, and error_var
err_var.cle <- matrix(1, nrow=G,ncol=I)
# simulate data
# enter group mu and sigma
data.mi$COMP <- rowMeans(data.mi[,compliance])
mu<-scale(aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=mean, na.rm=T)[,2])[,1]
sigma <- (aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=sd, na.rm=T)[,2])
N <- rep(n,G)
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
#par.simul <- invariance_alignment_cfa_config(dat = dat[,items.PSUP],
#                                             group = dat$group,
#                                             estimator='WLSMV'
#                                             )
# directly extract from cfa
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 +
secondary_stressors__3 +secondary_stressors__4'
cfa.test <- cfa(cfa.model.PSUP,dat,group='group',estimator='WLSMV')
params <- parameterEstimates(cfa.test)
lambda <-  matrix( params[ params$op=="=~", "est"], nrow=28,  byrow=T)
nu <- matrix( ipars[ params$op=="~1"  & params$se !=0, "est" ], nrow=28,  byrow=T)
err_var <- matrix( ipars[ params$op=="~~"  & params$rhs=='PSUP', "est" ], nrow=28,  byrow=T)
#flag <- sum(par.simul$err_var < 0)
flag <- sum(err_var < 0)
if (flag > 0){
next
}
#mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
#                                     par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.simul <- invariance.alignment(lambda = lambda, nu =
nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25),
optim='optim')
# true vs aligned scores
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
psi.simul <- params.simul[(params.simul$op=='~~')&(params.simul$lhs=='PSUP'),'est']
correlation.psi <- corr.test(psi.simul,mod1.simul$pars$psi0,method='spearman')$r
cor.mean[j] <- correlation
cor.var[j] <- correlation.psi
R2.loading[j] <- mod1.simul$es.invariance['R2',1]
R2.intercept[j] <- mod1.simul$es.invariance['R2',2]
if (flag ==0){
break
}
}
# make matrix
# with error flag
to.return <-cbind(cor.mean,cor.var,R2.loading,R2.intercept)
to.return <- data.matrix(to.return)
message  (sprintf('%d/%d Done',j,times))
return(to.return)
}
start_100 <-Sys.time()
now <- foreach (i = seq(1,times)) %dopar%{
# get result
simulation_CLE(1,100,data.mi,28,i)
#  message(sprintf('%d',i))
}
items.PSUP <- c('secondary_stressors__1','secondary_stressors__2',
'secondary_stressors__3','secondary_stressors__4')
compliance <- items.PSUP
# list for return
cor.mean <- rep(0,times)
cor.var <- rep(0,times)
R2.loading <- rep(0,times)
R2.intercept <- rep(0,times)
# simulation replication
set.seed(seed)
# repeat
j <- 1
G <- 28 # groups
I <- 4 # items
# lambda, nu, and error_var
err_var.cle <- matrix(1, nrow=G,ncol=I)
# simulate data
# enter group mu and sigma
data.mi$COMP <- rowMeans(data.mi[,compliance])
mu<-scale(aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=mean, na.rm=T)[,2])[,1]
sigma <- (aggregate(x=data.mi$COMP,
by = list(data.mi$UserLanguage),
FUN=sd, na.rm=T)[,2])
N <- rep(n,G)
dat <- invariance_alignment_simulate(
par.cle$nu,par.cle$lambda,err_var.cle,mu,sigma,N
)
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 + secondary_stressors__2
secondary_stressors__3 +secondary_stressors__4'
cfa.test <- cfa(cfa.model.PSUP,dat,group='group',estimator='WLSMV')
cfa.model.PSUP <-'PSUP =~ secondary_stressors__1 + secondary_stressors__2+
secondary_stressors__3 +secondary_stressors__4'
cfa.test <- cfa(cfa.model.PSUP,dat,group='group',estimator='WLSMV')
params <- parameterEstimates(cfa.test)
lambda <-  matrix( params[ params$op=="=~", "est"], nrow=28,  byrow=T)
nu <- matrix( ipars[ params$op=="~1"  & params$se !=0, "est" ], nrow=28,  byrow=T)
err_var <- matrix( ipars[ params$op=="~~"  & params$rhs=='PSUP', "est" ], nrow=28,  byrow=T)
err_var
#mod1.simul <- invariance.alignment(lambda = par.simul$lambda, nu =
#                                     par.simul$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
mod1.simul <- invariance.alignment(lambda = lambda, nu =
nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25),
optim='optim')
mod1.simul$es.invariance
cfa.model.simul <- cfa.model.PSUP
cfa.simul <- cfa(cfa.model.simul,dat,estimator='WLSMV',group='group',
group.equal=c('loadings','intercepts'),meanstructure=T)
# get group mean
params.simul <- parameterEstimates(cfa.simul)
alpha.simul <- params.simul[(params.simul$op=='~1')&(params.simul$lhs=='PSUP'),'est']
alpha.simul
plot(mod1.simul$pars$alpha0,alpha.simul)
# group mean correlation (Muthen 2018)
correlation <- corr.test(alpha.simul,mod1.simul$pars$alpha0,method='spearman')$r
mod1.simul$pars$alpha0
params.simul[1:30,]
summary(cfa.simul)
test<- lavPredict(cfa.simul)
test[[1]]
mean(test[[1]])
mean(test[[2]])
mean(test[[3]])
mean(test[[4]])
alpha.simul
mean(test[[25]])
mean(test[[26]])
